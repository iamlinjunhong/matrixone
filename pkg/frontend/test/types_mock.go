// Code generated by MockGen. DO NOT EDIT.
// Source: ../types.go

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	buffer "github.com/matrixorigin/matrixone/pkg/common/buffer"
	mpool "github.com/matrixorigin/matrixone/pkg/common/mpool"
	batch "github.com/matrixorigin/matrixone/pkg/container/batch"
	types "github.com/matrixorigin/matrixone/pkg/container/types"
	frontend "github.com/matrixorigin/matrixone/pkg/frontend"
	plan "github.com/matrixorigin/matrixone/pkg/pb/plan"
	timestamp "github.com/matrixorigin/matrixone/pkg/pb/timestamp"
	tree "github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	plan0 "github.com/matrixorigin/matrixone/pkg/sql/plan"
	util "github.com/matrixorigin/matrixone/pkg/util"
	motrace "github.com/matrixorigin/matrixone/pkg/util/trace/impl/motrace"
	process "github.com/matrixorigin/matrixone/pkg/vm/process"
)

// MockComputationRunner is a mock of ComputationRunner interface.
type MockComputationRunner struct {
	ctrl     *gomock.Controller
	recorder *MockComputationRunnerMockRecorder
}

// MockComputationRunnerMockRecorder is the mock recorder for MockComputationRunner.
type MockComputationRunnerMockRecorder struct {
	mock *MockComputationRunner
}

// NewMockComputationRunner creates a new mock instance.
func NewMockComputationRunner(ctrl *gomock.Controller) *MockComputationRunner {
	mock := &MockComputationRunner{ctrl: ctrl}
	mock.recorder = &MockComputationRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputationRunner) EXPECT() *MockComputationRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockComputationRunner) Run(ts uint64) (*util.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ts)
	ret0, _ := ret[0].(*util.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockComputationRunnerMockRecorder) Run(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockComputationRunner)(nil).Run), ts)
}

// MockComputationWrapper is a mock of ComputationWrapper interface.
type MockComputationWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockComputationWrapperMockRecorder
}

// MockComputationWrapperMockRecorder is the mock recorder for MockComputationWrapper.
type MockComputationWrapperMockRecorder struct {
	mock *MockComputationWrapper
}

// NewMockComputationWrapper creates a new mock instance.
func NewMockComputationWrapper(ctrl *gomock.Controller) *MockComputationWrapper {
	mock := &MockComputationWrapper{ctrl: ctrl}
	mock.recorder = &MockComputationWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputationWrapper) EXPECT() *MockComputationWrapperMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockComputationWrapper) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockComputationWrapperMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockComputationWrapper)(nil).Clear))
}

// Compile mocks base method.
func (m *MockComputationWrapper) Compile(any any, fill func(*batch.Batch) error) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", any, fill)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockComputationWrapperMockRecorder) Compile(any, fill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockComputationWrapper)(nil).Compile), any, fill)
}

// Free mocks base method.
func (m *MockComputationWrapper) Free() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free.
func (mr *MockComputationWrapperMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockComputationWrapper)(nil).Free))
}

// GetAst mocks base method.
func (m *MockComputationWrapper) GetAst() tree.Statement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAst")
	ret0, _ := ret[0].(tree.Statement)
	return ret0
}

// GetAst indicates an expected call of GetAst.
func (mr *MockComputationWrapperMockRecorder) GetAst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAst", reflect.TypeOf((*MockComputationWrapper)(nil).GetAst))
}

// GetColumns mocks base method.
func (m *MockComputationWrapper) GetColumns(ctx context.Context) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumns", ctx)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockComputationWrapperMockRecorder) GetColumns(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockComputationWrapper)(nil).GetColumns), ctx)
}

// GetLoadTag mocks base method.
func (m *MockComputationWrapper) GetLoadTag() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadTag")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetLoadTag indicates an expected call of GetLoadTag.
func (mr *MockComputationWrapperMockRecorder) GetLoadTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadTag", reflect.TypeOf((*MockComputationWrapper)(nil).GetLoadTag))
}

// GetProcess mocks base method.
func (m *MockComputationWrapper) GetProcess() *process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcess")
	ret0, _ := ret[0].(*process.Process)
	return ret0
}

// GetProcess indicates an expected call of GetProcess.
func (mr *MockComputationWrapperMockRecorder) GetProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcess", reflect.TypeOf((*MockComputationWrapper)(nil).GetProcess))
}

// GetServerStatus mocks base method.
func (m *MockComputationWrapper) GetServerStatus() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerStatus")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// GetServerStatus indicates an expected call of GetServerStatus.
func (mr *MockComputationWrapperMockRecorder) GetServerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerStatus", reflect.TypeOf((*MockComputationWrapper)(nil).GetServerStatus))
}

// GetUUID mocks base method.
func (m *MockComputationWrapper) GetUUID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockComputationWrapperMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockComputationWrapper)(nil).GetUUID))
}

// Plan mocks base method.
func (m *MockComputationWrapper) Plan() *plan.Plan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan")
	ret0, _ := ret[0].(*plan.Plan)
	return ret0
}

// Plan indicates an expected call of Plan.
func (mr *MockComputationWrapperMockRecorder) Plan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockComputationWrapper)(nil).Plan))
}

// RecordExecPlan mocks base method.
func (m *MockComputationWrapper) RecordExecPlan(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordExecPlan", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordExecPlan indicates an expected call of RecordExecPlan.
func (mr *MockComputationWrapperMockRecorder) RecordExecPlan(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordExecPlan", reflect.TypeOf((*MockComputationWrapper)(nil).RecordExecPlan), ctx)
}

// ResetPlanAndStmt mocks base method.
func (m *MockComputationWrapper) ResetPlanAndStmt(stmt tree.Statement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPlanAndStmt", stmt)
}

// ResetPlanAndStmt indicates an expected call of ResetPlanAndStmt.
func (mr *MockComputationWrapperMockRecorder) ResetPlanAndStmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPlanAndStmt", reflect.TypeOf((*MockComputationWrapper)(nil).ResetPlanAndStmt), stmt)
}

// Run mocks base method.
func (m *MockComputationWrapper) Run(ts uint64) (*util.RunResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ts)
	ret0, _ := ret[0].(*util.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockComputationWrapperMockRecorder) Run(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockComputationWrapper)(nil).Run), ts)
}

// MockColumnInfo is a mock of ColumnInfo interface.
type MockColumnInfo struct {
	ctrl     *gomock.Controller
	recorder *MockColumnInfoMockRecorder
}

// MockColumnInfoMockRecorder is the mock recorder for MockColumnInfo.
type MockColumnInfoMockRecorder struct {
	mock *MockColumnInfo
}

// NewMockColumnInfo creates a new mock instance.
func NewMockColumnInfo(ctrl *gomock.Controller) *MockColumnInfo {
	mock := &MockColumnInfo{ctrl: ctrl}
	mock.recorder = &MockColumnInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColumnInfo) EXPECT() *MockColumnInfoMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockColumnInfo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockColumnInfoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockColumnInfo)(nil).GetName))
}

// GetType mocks base method.
func (m *MockColumnInfo) GetType() types.T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.T)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockColumnInfoMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockColumnInfo)(nil).GetType))
}

// MockTableInfo is a mock of TableInfo interface.
type MockTableInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTableInfoMockRecorder
}

// MockTableInfoMockRecorder is the mock recorder for MockTableInfo.
type MockTableInfoMockRecorder struct {
	mock *MockTableInfo
}

// NewMockTableInfo creates a new mock instance.
func NewMockTableInfo(ctrl *gomock.Controller) *MockTableInfo {
	mock := &MockTableInfo{ctrl: ctrl}
	mock.recorder = &MockTableInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableInfo) EXPECT() *MockTableInfoMockRecorder {
	return m.recorder
}

// GetColumns mocks base method.
func (m *MockTableInfo) GetColumns() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetColumns")
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockTableInfoMockRecorder) GetColumns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockTableInfo)(nil).GetColumns))
}

// MockExecResult is a mock of ExecResult interface.
type MockExecResult struct {
	ctrl     *gomock.Controller
	recorder *MockExecResultMockRecorder
}

// MockExecResultMockRecorder is the mock recorder for MockExecResult.
type MockExecResultMockRecorder struct {
	mock *MockExecResult
}

// NewMockExecResult creates a new mock instance.
func NewMockExecResult(ctrl *gomock.Controller) *MockExecResult {
	mock := &MockExecResult{ctrl: ctrl}
	mock.recorder = &MockExecResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecResult) EXPECT() *MockExecResultMockRecorder {
	return m.recorder
}

// GetInt64 mocks base method.
func (m *MockExecResult) GetInt64(ctx context.Context, rindex, cindex uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", ctx, rindex, cindex)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockExecResultMockRecorder) GetInt64(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockExecResult)(nil).GetInt64), ctx, rindex, cindex)
}

// GetRowCount mocks base method.
func (m *MockExecResult) GetRowCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRowCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRowCount indicates an expected call of GetRowCount.
func (mr *MockExecResultMockRecorder) GetRowCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowCount", reflect.TypeOf((*MockExecResult)(nil).GetRowCount))
}

// GetString mocks base method.
func (m *MockExecResult) GetString(ctx context.Context, rindex, cindex uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, rindex, cindex)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockExecResultMockRecorder) GetString(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockExecResult)(nil).GetString), ctx, rindex, cindex)
}

// GetUint64 mocks base method.
func (m *MockExecResult) GetUint64(ctx context.Context, rindex, cindex uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUint64", ctx, rindex, cindex)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUint64 indicates an expected call of GetUint64.
func (mr *MockExecResultMockRecorder) GetUint64(ctx, rindex, cindex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUint64", reflect.TypeOf((*MockExecResult)(nil).GetUint64), ctx, rindex, cindex)
}

// MockBackgroundExec is a mock of BackgroundExec interface.
type MockBackgroundExec struct {
	ctrl     *gomock.Controller
	recorder *MockBackgroundExecMockRecorder
}

// MockBackgroundExecMockRecorder is the mock recorder for MockBackgroundExec.
type MockBackgroundExecMockRecorder struct {
	mock *MockBackgroundExec
}

// NewMockBackgroundExec creates a new mock instance.
func NewMockBackgroundExec(ctrl *gomock.Controller) *MockBackgroundExec {
	mock := &MockBackgroundExec{ctrl: ctrl}
	mock.recorder = &MockBackgroundExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackgroundExec) EXPECT() *MockBackgroundExecMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockBackgroundExec) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockBackgroundExecMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockBackgroundExec)(nil).Clear))
}

// ClearExecResultBatches mocks base method.
func (m *MockBackgroundExec) ClearExecResultBatches() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearExecResultBatches")
}

// ClearExecResultBatches indicates an expected call of ClearExecResultBatches.
func (mr *MockBackgroundExecMockRecorder) ClearExecResultBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearExecResultBatches", reflect.TypeOf((*MockBackgroundExec)(nil).ClearExecResultBatches))
}

// ClearExecResultSet mocks base method.
func (m *MockBackgroundExec) ClearExecResultSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearExecResultSet")
}

// ClearExecResultSet indicates an expected call of ClearExecResultSet.
func (mr *MockBackgroundExecMockRecorder) ClearExecResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearExecResultSet", reflect.TypeOf((*MockBackgroundExec)(nil).ClearExecResultSet))
}

// Close mocks base method.
func (m *MockBackgroundExec) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBackgroundExecMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBackgroundExec)(nil).Close))
}

// Exec mocks base method.
func (m *MockBackgroundExec) Exec(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockBackgroundExecMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockBackgroundExec)(nil).Exec), arg0, arg1)
}

// ExecRestore mocks base method.
func (m *MockBackgroundExec) ExecRestore(arg0 context.Context, arg1 string, arg2, arg3 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecRestore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecRestore indicates an expected call of ExecRestore.
func (mr *MockBackgroundExecMockRecorder) ExecRestore(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecRestore", reflect.TypeOf((*MockBackgroundExec)(nil).ExecRestore), arg0, arg1, arg2, arg3)
}

// ExecStmt mocks base method.
func (m *MockBackgroundExec) ExecStmt(arg0 context.Context, arg1 tree.Statement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecStmt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecStmt indicates an expected call of ExecStmt.
func (mr *MockBackgroundExecMockRecorder) ExecStmt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecStmt", reflect.TypeOf((*MockBackgroundExec)(nil).ExecStmt), arg0, arg1)
}

// GetExecResultBatches mocks base method.
func (m *MockBackgroundExec) GetExecResultBatches() []*batch.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecResultBatches")
	ret0, _ := ret[0].([]*batch.Batch)
	return ret0
}

// GetExecResultBatches indicates an expected call of GetExecResultBatches.
func (mr *MockBackgroundExecMockRecorder) GetExecResultBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecResultBatches", reflect.TypeOf((*MockBackgroundExec)(nil).GetExecResultBatches))
}

// GetExecResultSet mocks base method.
func (m *MockBackgroundExec) GetExecResultSet() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecResultSet")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetExecResultSet indicates an expected call of GetExecResultSet.
func (mr *MockBackgroundExecMockRecorder) GetExecResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecResultSet", reflect.TypeOf((*MockBackgroundExec)(nil).GetExecResultSet))
}

// MockoutputPool is a mock of outputPool interface.
type MockoutputPool struct {
	ctrl     *gomock.Controller
	recorder *MockoutputPoolMockRecorder
}

// MockoutputPoolMockRecorder is the mock recorder for MockoutputPool.
type MockoutputPoolMockRecorder struct {
	mock *MockoutputPool
}

// NewMockoutputPool creates a new mock instance.
func NewMockoutputPool(ctrl *gomock.Controller) *MockoutputPool {
	mock := &MockoutputPool{ctrl: ctrl}
	mock.recorder = &MockoutputPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutputPool) EXPECT() *MockoutputPoolMockRecorder {
	return m.recorder
}

// flush mocks base method.
func (m *MockoutputPool) flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// flush indicates an expected call of flush.
func (mr *MockoutputPoolMockRecorder) flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "flush", reflect.TypeOf((*MockoutputPool)(nil).flush))
}

// getEmptyRow mocks base method.
func (m *MockoutputPool) getEmptyRow() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEmptyRow")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEmptyRow indicates an expected call of getEmptyRow.
func (mr *MockoutputPoolMockRecorder) getEmptyRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEmptyRow", reflect.TypeOf((*MockoutputPool)(nil).getEmptyRow))
}

// reset mocks base method.
func (m *MockoutputPool) reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "reset")
}

// reset indicates an expected call of reset.
func (mr *MockoutputPoolMockRecorder) reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reset", reflect.TypeOf((*MockoutputPool)(nil).reset))
}

// resetLineStr mocks base method.
func (m *MockoutputPool) resetLineStr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "resetLineStr")
}

// resetLineStr indicates an expected call of resetLineStr.
func (mr *MockoutputPoolMockRecorder) resetLineStr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetLineStr", reflect.TypeOf((*MockoutputPool)(nil).resetLineStr))
}

// MockFeSession is a mock of FeSession interface.
type MockFeSession struct {
	ctrl     *gomock.Controller
	recorder *MockFeSessionMockRecorder
}

// MockFeSessionMockRecorder is the mock recorder for MockFeSession.
type MockFeSessionMockRecorder struct {
	mock *MockFeSession
}

// NewMockFeSession creates a new mock instance.
func NewMockFeSession(ctrl *gomock.Controller) *MockFeSession {
	mock := &MockFeSession{ctrl: ctrl}
	mock.recorder = &MockFeSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeSession) EXPECT() *MockFeSessionMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockFeSession) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockFeSessionMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFeSession)(nil).Clear))
}

// Close mocks base method.
func (m *MockFeSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFeSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFeSession)(nil).Close))
}

// CopySeqToProc mocks base method.
func (m *MockFeSession) CopySeqToProc(proc *process.Process) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CopySeqToProc", proc)
}

// CopySeqToProc indicates an expected call of CopySeqToProc.
func (mr *MockFeSessionMockRecorder) CopySeqToProc(proc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySeqToProc", reflect.TypeOf((*MockFeSession)(nil).CopySeqToProc), proc)
}

// CountPayload mocks base method.
func (m *MockFeSession) CountPayload(i int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountPayload", i)
}

// CountPayload indicates an expected call of CountPayload.
func (mr *MockFeSessionMockRecorder) CountPayload(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPayload", reflect.TypeOf((*MockFeSession)(nil).CountPayload), i)
}

// DisableTrace mocks base method.
func (m *MockFeSession) DisableTrace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTrace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableTrace indicates an expected call of DisableTrace.
func (mr *MockFeSessionMockRecorder) DisableTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrace", reflect.TypeOf((*MockFeSession)(nil).DisableTrace))
}

// GetAccountId mocks base method.
func (m *MockFeSession) GetAccountId() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountId")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetAccountId indicates an expected call of GetAccountId.
func (mr *MockFeSessionMockRecorder) GetAccountId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockFeSession)(nil).GetAccountId))
}

// GetBackgroundExec mocks base method.
func (m *MockFeSession) GetBackgroundExec(ctx context.Context) frontend.BackgroundExec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundExec", ctx)
	ret0, _ := ret[0].(frontend.BackgroundExec)
	return ret0
}

// GetBackgroundExec indicates an expected call of GetBackgroundExec.
func (mr *MockFeSessionMockRecorder) GetBackgroundExec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundExec", reflect.TypeOf((*MockFeSession)(nil).GetBackgroundExec), ctx)
}

// GetBuffer mocks base method.
func (m *MockFeSession) GetBuffer() *buffer.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuffer")
	ret0, _ := ret[0].(*buffer.Buffer)
	return ret0
}

// GetBuffer indicates an expected call of GetBuffer.
func (mr *MockFeSessionMockRecorder) GetBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuffer", reflect.TypeOf((*MockFeSession)(nil).GetBuffer))
}

// GetCmd mocks base method.
func (m *MockFeSession) GetCmd() frontend.CommandType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCmd")
	ret0, _ := ret[0].(frontend.CommandType)
	return ret0
}

// GetCmd indicates an expected call of GetCmd.
func (mr *MockFeSessionMockRecorder) GetCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCmd", reflect.TypeOf((*MockFeSession)(nil).GetCmd))
}

// GetConnectionID mocks base method.
func (m *MockFeSession) GetConnectionID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetConnectionID indicates an expected call of GetConnectionID.
func (mr *MockFeSessionMockRecorder) GetConnectionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionID", reflect.TypeOf((*MockFeSession)(nil).GetConnectionID))
}

// GetDatabaseName mocks base method.
func (m *MockFeSession) GetDatabaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseName indicates an expected call of GetDatabaseName.
func (mr *MockFeSessionMockRecorder) GetDatabaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseName", reflect.TypeOf((*MockFeSession)(nil).GetDatabaseName))
}

// GetDebugString mocks base method.
func (m *MockFeSession) GetDebugString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDebugString indicates an expected call of GetDebugString.
func (mr *MockFeSessionMockRecorder) GetDebugString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugString", reflect.TypeOf((*MockFeSession)(nil).GetDebugString))
}

// GetFromRealUser mocks base method.
func (m *MockFeSession) GetFromRealUser() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRealUser")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetFromRealUser indicates an expected call of GetFromRealUser.
func (mr *MockFeSessionMockRecorder) GetFromRealUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRealUser", reflect.TypeOf((*MockFeSession)(nil).GetFromRealUser))
}

// GetGlobalSystemVariableValue mocks base method.
func (m *MockFeSession) GetGlobalSystemVariableValue(ctx context.Context, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSystemVariableValue", ctx, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSystemVariableValue indicates an expected call of GetGlobalSystemVariableValue.
func (mr *MockFeSessionMockRecorder) GetGlobalSystemVariableValue(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSystemVariableValue", reflect.TypeOf((*MockFeSession)(nil).GetGlobalSystemVariableValue), ctx, name)
}

// GetGlobalVar mocks base method.
func (m *MockFeSession) GetGlobalVar(ctx context.Context, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalVar", ctx, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalVar indicates an expected call of GetGlobalVar.
func (mr *MockFeSessionMockRecorder) GetGlobalVar(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalVar", reflect.TypeOf((*MockFeSession)(nil).GetGlobalVar), ctx, name)
}

// GetIsInternal mocks base method.
func (m *MockFeSession) GetIsInternal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsInternal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsInternal indicates an expected call of GetIsInternal.
func (mr *MockFeSessionMockRecorder) GetIsInternal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsInternal", reflect.TypeOf((*MockFeSession)(nil).GetIsInternal))
}

// GetLastInsertID mocks base method.
func (m *MockFeSession) GetLastInsertID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastInsertID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastInsertID indicates an expected call of GetLastInsertID.
func (mr *MockFeSessionMockRecorder) GetLastInsertID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastInsertID", reflect.TypeOf((*MockFeSession)(nil).GetLastInsertID))
}

// GetMemPool mocks base method.
func (m *MockFeSession) GetMemPool() *mpool.MPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemPool")
	ret0, _ := ret[0].(*mpool.MPool)
	return ret0
}

// GetMemPool indicates an expected call of GetMemPool.
func (mr *MockFeSessionMockRecorder) GetMemPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemPool", reflect.TypeOf((*MockFeSession)(nil).GetMemPool))
}

// GetMysqlProtocol mocks base method.
func (m *MockFeSession) GetMysqlProtocol() frontend.MysqlProtocol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlProtocol")
	ret0, _ := ret[0].(frontend.MysqlProtocol)
	return ret0
}

// GetMysqlProtocol indicates an expected call of GetMysqlProtocol.
func (mr *MockFeSessionMockRecorder) GetMysqlProtocol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlProtocol", reflect.TypeOf((*MockFeSession)(nil).GetMysqlProtocol))
}

// GetMysqlResultSet mocks base method.
func (m *MockFeSession) GetMysqlResultSet() *frontend.MysqlResultSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMysqlResultSet")
	ret0, _ := ret[0].(*frontend.MysqlResultSet)
	return ret0
}

// GetMysqlResultSet indicates an expected call of GetMysqlResultSet.
func (mr *MockFeSessionMockRecorder) GetMysqlResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMysqlResultSet", reflect.TypeOf((*MockFeSession)(nil).GetMysqlResultSet))
}

// GetPrepareStmt mocks base method.
func (m *MockFeSession) GetPrepareStmt(ctx context.Context, name string) (*frontend.PrepareStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrepareStmt", ctx, name)
	ret0, _ := ret[0].(*frontend.PrepareStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrepareStmt indicates an expected call of GetPrepareStmt.
func (mr *MockFeSessionMockRecorder) GetPrepareStmt(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrepareStmt", reflect.TypeOf((*MockFeSession)(nil).GetPrepareStmt), ctx, name)
}

// GetProc mocks base method.
func (m *MockFeSession) GetProc() *process.Process {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProc")
	ret0, _ := ret[0].(*process.Process)
	return ret0
}

// GetProc indicates an expected call of GetProc.
func (mr *MockFeSessionMockRecorder) GetProc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProc", reflect.TypeOf((*MockFeSession)(nil).GetProc))
}

// GetRawBatchBackgroundExec mocks base method.
func (m *MockFeSession) GetRawBatchBackgroundExec(ctx context.Context) frontend.BackgroundExec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawBatchBackgroundExec", ctx)
	ret0, _ := ret[0].(frontend.BackgroundExec)
	return ret0
}

// GetRawBatchBackgroundExec indicates an expected call of GetRawBatchBackgroundExec.
func (mr *MockFeSessionMockRecorder) GetRawBatchBackgroundExec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawBatchBackgroundExec", reflect.TypeOf((*MockFeSession)(nil).GetRawBatchBackgroundExec), ctx)
}

// GetSessionVar mocks base method.
func (m *MockFeSession) GetSessionVar(ctx context.Context, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionVar", ctx, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionVar indicates an expected call of GetSessionVar.
func (mr *MockFeSessionMockRecorder) GetSessionVar(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionVar", reflect.TypeOf((*MockFeSession)(nil).GetSessionVar), ctx, name)
}

// GetSql mocks base method.
func (m *MockFeSession) GetSql() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSql")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSql indicates an expected call of GetSql.
func (mr *MockFeSessionMockRecorder) GetSql() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSql", reflect.TypeOf((*MockFeSession)(nil).GetSql))
}

// GetSqlCount mocks base method.
func (m *MockFeSession) GetSqlCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSqlCount indicates an expected call of GetSqlCount.
func (mr *MockFeSessionMockRecorder) GetSqlCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlCount", reflect.TypeOf((*MockFeSession)(nil).GetSqlCount))
}

// GetSqlHelper mocks base method.
func (m *MockFeSession) GetSqlHelper() *frontend.SqlHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlHelper")
	ret0, _ := ret[0].(*frontend.SqlHelper)
	return ret0
}

// GetSqlHelper indicates an expected call of GetSqlHelper.
func (mr *MockFeSessionMockRecorder) GetSqlHelper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlHelper", reflect.TypeOf((*MockFeSession)(nil).GetSqlHelper))
}

// GetSqlOfStmt mocks base method.
func (m *MockFeSession) GetSqlOfStmt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlOfStmt")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSqlOfStmt indicates an expected call of GetSqlOfStmt.
func (mr *MockFeSessionMockRecorder) GetSqlOfStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlOfStmt", reflect.TypeOf((*MockFeSession)(nil).GetSqlOfStmt))
}

// GetStatsCache mocks base method.
func (m *MockFeSession) GetStatsCache() *plan0.StatsCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsCache")
	ret0, _ := ret[0].(*plan0.StatsCache)
	return ret0
}

// GetStatsCache indicates an expected call of GetStatsCache.
func (mr *MockFeSessionMockRecorder) GetStatsCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsCache", reflect.TypeOf((*MockFeSession)(nil).GetStatsCache))
}

// GetStmtId mocks base method.
func (m *MockFeSession) GetStmtId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetStmtId indicates an expected call of GetStmtId.
func (mr *MockFeSessionMockRecorder) GetStmtId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtId", reflect.TypeOf((*MockFeSession)(nil).GetStmtId))
}

// GetStmtInfo mocks base method.
func (m *MockFeSession) GetStmtInfo() *motrace.StatementInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtInfo")
	ret0, _ := ret[0].(*motrace.StatementInfo)
	return ret0
}

// GetStmtInfo indicates an expected call of GetStmtInfo.
func (mr *MockFeSessionMockRecorder) GetStmtInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtInfo", reflect.TypeOf((*MockFeSession)(nil).GetStmtInfo))
}

// GetStmtProfile mocks base method.
func (m *MockFeSession) GetStmtProfile() *process.StmtProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStmtProfile")
	ret0, _ := ret[0].(*process.StmtProfile)
	return ret0
}

// GetStmtProfile indicates an expected call of GetStmtProfile.
func (mr *MockFeSessionMockRecorder) GetStmtProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStmtProfile", reflect.TypeOf((*MockFeSession)(nil).GetStmtProfile))
}

// GetTenantInfo mocks base method.
func (m *MockFeSession) GetTenantInfo() *frontend.TenantInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantInfo")
	ret0, _ := ret[0].(*frontend.TenantInfo)
	return ret0
}

// GetTenantInfo indicates an expected call of GetTenantInfo.
func (mr *MockFeSessionMockRecorder) GetTenantInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantInfo", reflect.TypeOf((*MockFeSession)(nil).GetTenantInfo))
}

// GetTenantName mocks base method.
func (m *MockFeSession) GetTenantName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTenantName indicates an expected call of GetTenantName.
func (mr *MockFeSessionMockRecorder) GetTenantName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantName", reflect.TypeOf((*MockFeSession)(nil).GetTenantName))
}

// GetTimeZone mocks base method.
func (m *MockFeSession) GetTimeZone() *time.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeZone")
	ret0, _ := ret[0].(*time.Location)
	return ret0
}

// GetTimeZone indicates an expected call of GetTimeZone.
func (mr *MockFeSessionMockRecorder) GetTimeZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeZone", reflect.TypeOf((*MockFeSession)(nil).GetTimeZone))
}

// GetTxnCompileCtx mocks base method.
func (m *MockFeSession) GetTxnCompileCtx() *frontend.TxnCompilerContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnCompileCtx")
	ret0, _ := ret[0].(*frontend.TxnCompilerContext)
	return ret0
}

// GetTxnCompileCtx indicates an expected call of GetTxnCompileCtx.
func (mr *MockFeSessionMockRecorder) GetTxnCompileCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnCompileCtx", reflect.TypeOf((*MockFeSession)(nil).GetTxnCompileCtx))
}

// GetTxnHandler mocks base method.
func (m *MockFeSession) GetTxnHandler() *frontend.TxnHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnHandler")
	ret0, _ := ret[0].(*frontend.TxnHandler)
	return ret0
}

// GetTxnHandler indicates an expected call of GetTxnHandler.
func (mr *MockFeSessionMockRecorder) GetTxnHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnHandler", reflect.TypeOf((*MockFeSession)(nil).GetTxnHandler))
}

// GetTxnId mocks base method.
func (m *MockFeSession) GetTxnId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetTxnId indicates an expected call of GetTxnId.
func (mr *MockFeSessionMockRecorder) GetTxnId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnId", reflect.TypeOf((*MockFeSession)(nil).GetTxnId))
}

// GetTxnInfo mocks base method.
func (m *MockFeSession) GetTxnInfo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxnInfo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxnInfo indicates an expected call of GetTxnInfo.
func (mr *MockFeSessionMockRecorder) GetTxnInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxnInfo", reflect.TypeOf((*MockFeSession)(nil).GetTxnInfo))
}

// GetUUID mocks base method.
func (m *MockFeSession) GetUUID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockFeSessionMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockFeSession)(nil).GetUUID))
}

// GetUUIDString mocks base method.
func (m *MockFeSession) GetUUIDString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUIDString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUUIDString indicates an expected call of GetUUIDString.
func (mr *MockFeSessionMockRecorder) GetUUIDString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUIDString", reflect.TypeOf((*MockFeSession)(nil).GetUUIDString))
}

// GetUpstream mocks base method.
func (m *MockFeSession) GetUpstream() frontend.FeSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstream")
	ret0, _ := ret[0].(frontend.FeSession)
	return ret0
}

// GetUpstream indicates an expected call of GetUpstream.
func (mr *MockFeSessionMockRecorder) GetUpstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstream", reflect.TypeOf((*MockFeSession)(nil).GetUpstream))
}

// GetUserDefinedVar mocks base method.
func (m *MockFeSession) GetUserDefinedVar(name string) (frontend.SystemVariableType, *frontend.UserDefinedVar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedVar", name)
	ret0, _ := ret[0].(frontend.SystemVariableType)
	ret1, _ := ret[1].(*frontend.UserDefinedVar)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserDefinedVar indicates an expected call of GetUserDefinedVar.
func (mr *MockFeSessionMockRecorder) GetUserDefinedVar(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedVar", reflect.TypeOf((*MockFeSession)(nil).GetUserDefinedVar), name)
}

// GetUserName mocks base method.
func (m *MockFeSession) GetUserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockFeSessionMockRecorder) GetUserName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockFeSession)(nil).GetUserName))
}

// IsBackgroundSession mocks base method.
func (m *MockFeSession) IsBackgroundSession() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBackgroundSession")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBackgroundSession indicates an expected call of IsBackgroundSession.
func (mr *MockFeSessionMockRecorder) IsBackgroundSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBackgroundSession", reflect.TypeOf((*MockFeSession)(nil).IsBackgroundSession))
}

// IsDerivedStmt mocks base method.
func (m *MockFeSession) IsDerivedStmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDerivedStmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDerivedStmt indicates an expected call of IsDerivedStmt.
func (mr *MockFeSessionMockRecorder) IsDerivedStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDerivedStmt", reflect.TypeOf((*MockFeSession)(nil).IsDerivedStmt))
}

// RemovePrepareStmt mocks base method.
func (m *MockFeSession) RemovePrepareStmt(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePrepareStmt", name)
}

// RemovePrepareStmt indicates an expected call of RemovePrepareStmt.
func (mr *MockFeSessionMockRecorder) RemovePrepareStmt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrepareStmt", reflect.TypeOf((*MockFeSession)(nil).RemovePrepareStmt), name)
}

// SendRows mocks base method.
func (m *MockFeSession) SendRows() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRows")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SendRows indicates an expected call of SendRows.
func (mr *MockFeSessionMockRecorder) SendRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRows", reflect.TypeOf((*MockFeSession)(nil).SendRows))
}

// SetAccountId mocks base method.
func (m *MockFeSession) SetAccountId(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccountId", arg0)
}

// SetAccountId indicates an expected call of SetAccountId.
func (mr *MockFeSessionMockRecorder) SetAccountId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountId", reflect.TypeOf((*MockFeSession)(nil).SetAccountId), arg0)
}

// SetData mocks base method.
func (m *MockFeSession) SetData(arg0 [][]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", arg0)
}

// SetData indicates an expected call of SetData.
func (mr *MockFeSessionMockRecorder) SetData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockFeSession)(nil).SetData), arg0)
}

// SetDatabaseName mocks base method.
func (m *MockFeSession) SetDatabaseName(db string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabaseName", db)
}

// SetDatabaseName indicates an expected call of SetDatabaseName.
func (mr *MockFeSessionMockRecorder) SetDatabaseName(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseName", reflect.TypeOf((*MockFeSession)(nil).SetDatabaseName), db)
}

// SetMysqlResultSet mocks base method.
func (m *MockFeSession) SetMysqlResultSet(mrs *frontend.MysqlResultSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMysqlResultSet", mrs)
}

// SetMysqlResultSet indicates an expected call of SetMysqlResultSet.
func (mr *MockFeSessionMockRecorder) SetMysqlResultSet(mrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMysqlResultSet", reflect.TypeOf((*MockFeSession)(nil).SetMysqlResultSet), mrs)
}

// SetNewResponse mocks base method.
func (m *MockFeSession) SetNewResponse(category int, affectedRows uint64, cmd int, d interface{}, isLastStmt bool) *frontend.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewResponse", category, affectedRows, cmd, d, isLastStmt)
	ret0, _ := ret[0].(*frontend.Response)
	return ret0
}

// SetNewResponse indicates an expected call of SetNewResponse.
func (mr *MockFeSessionMockRecorder) SetNewResponse(category, affectedRows, cmd, d, isLastStmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewResponse", reflect.TypeOf((*MockFeSession)(nil).SetNewResponse), category, affectedRows, cmd, d, isLastStmt)
}

// SetPlan mocks base method.
func (m *MockFeSession) SetPlan(plan *plan.Plan) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlan", plan)
}

// SetPlan indicates an expected call of SetPlan.
func (mr *MockFeSessionMockRecorder) SetPlan(plan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlan", reflect.TypeOf((*MockFeSession)(nil).SetPlan), plan)
}

// SetShowStmtType mocks base method.
func (m *MockFeSession) SetShowStmtType(statement frontend.ShowStatementType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShowStmtType", statement)
}

// SetShowStmtType indicates an expected call of SetShowStmtType.
func (mr *MockFeSessionMockRecorder) SetShowStmtType(statement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShowStmtType", reflect.TypeOf((*MockFeSession)(nil).SetShowStmtType), statement)
}

// SetSql mocks base method.
func (m *MockFeSession) SetSql(sql string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSql", sql)
}

// SetSql indicates an expected call of SetSql.
func (mr *MockFeSessionMockRecorder) SetSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSql", reflect.TypeOf((*MockFeSession)(nil).SetSql), sql)
}

// SetTStmt mocks base method.
func (m *MockFeSession) SetTStmt(stmt *motrace.StatementInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTStmt", stmt)
}

// SetTStmt indicates an expected call of SetTStmt.
func (mr *MockFeSessionMockRecorder) SetTStmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTStmt", reflect.TypeOf((*MockFeSession)(nil).SetTStmt), stmt)
}

// SetTxnId mocks base method.
func (m *MockFeSession) SetTxnId(i []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxnId", i)
}

// SetTxnId indicates an expected call of SetTxnId.
func (mr *MockFeSessionMockRecorder) SetTxnId(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxnId", reflect.TypeOf((*MockFeSession)(nil).SetTxnId), i)
}

// addSqlCount mocks base method.
func (m *MockFeSession) addSqlCount(a uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addSqlCount", a)
}

// addSqlCount indicates an expected call of addSqlCount.
func (mr *MockFeSessionMockRecorder) addSqlCount(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addSqlCount", reflect.TypeOf((*MockFeSession)(nil).addSqlCount), a)
}

// cleanCache mocks base method.
func (m *MockFeSession) cleanCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cleanCache")
}

// cleanCache indicates an expected call of cleanCache.
func (mr *MockFeSessionMockRecorder) cleanCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cleanCache", reflect.TypeOf((*MockFeSession)(nil).cleanCache))
}

// getCNLabels mocks base method.
func (m *MockFeSession) getCNLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCNLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// getCNLabels indicates an expected call of getCNLabels.
func (mr *MockFeSessionMockRecorder) getCNLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCNLabels", reflect.TypeOf((*MockFeSession)(nil).getCNLabels))
}

// getCachedPlan mocks base method.
func (m *MockFeSession) getCachedPlan(sql string) *cachedPlan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCachedPlan", sql)
	ret0, _ := ret[0].(*cachedPlan)
	return ret0
}

// getCachedPlan indicates an expected call of getCachedPlan.
func (mr *MockFeSessionMockRecorder) getCachedPlan(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCachedPlan", reflect.TypeOf((*MockFeSession)(nil).getCachedPlan), sql)
}

// getLastCommitTS mocks base method.
func (m *MockFeSession) getLastCommitTS() timestamp.Timestamp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLastCommitTS")
	ret0, _ := ret[0].(timestamp.Timestamp)
	return ret0
}

// getLastCommitTS indicates an expected call of getLastCommitTS.
func (mr *MockFeSessionMockRecorder) getLastCommitTS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLastCommitTS", reflect.TypeOf((*MockFeSession)(nil).getLastCommitTS))
}

// getNextProcessId mocks base method.
func (m *MockFeSession) getNextProcessId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNextProcessId")
	ret0, _ := ret[0].(string)
	return ret0
}

// getNextProcessId indicates an expected call of getNextProcessId.
func (mr *MockFeSessionMockRecorder) getNextProcessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNextProcessId", reflect.TypeOf((*MockFeSession)(nil).getNextProcessId))
}

// getQueryId mocks base method.
func (m *MockFeSession) getQueryId(internal bool) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getQueryId", internal)
	ret0, _ := ret[0].([]string)
	return ret0
}

// getQueryId indicates an expected call of getQueryId.
func (mr *MockFeSessionMockRecorder) getQueryId(internal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getQueryId", reflect.TypeOf((*MockFeSession)(nil).getQueryId), internal)
}

// updateLastCommitTS mocks base method.
func (m *MockFeSession) updateLastCommitTS(ts timestamp.Timestamp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateLastCommitTS", ts)
}

// updateLastCommitTS indicates an expected call of updateLastCommitTS.
func (mr *MockFeSessionMockRecorder) updateLastCommitTS(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateLastCommitTS", reflect.TypeOf((*MockFeSession)(nil).updateLastCommitTS), ts)
}
